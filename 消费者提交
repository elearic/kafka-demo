### 1.自动提交

伪代码

```java
 	 private static void autoCommit() {
        Consumer consumer = ConsumerCreator.creatorConsumer();
        consumer.subscribe(Collections.singleton("topic1"));
        try {
            while (true) {
                ConsumerRecords<String, String> records = consumer.poll(1000);
                for (ConsumerRecord<String, String> record : records) {
                    //模拟消息的业务处理
                    System.out.println(
                            "topic = " + record.topic() + ", partition =" + record.partition()
                            + ", offset = " + record.offset() + ", consumer = " + record.key()
                            + ", record = " + record.value());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }finally {
            consumer.close();
        }
    }
```

​	  自动提交是让消费者提交偏移量最简单的方式。如果 **enable.auto.comit**被设为true,那么每过5s，消费者会自动把从poll()方法接受到的最大偏移量提交上去。提交时间间隔由 **auto.commit.interval.ms**控制，默认值是5s。与消费者里的其他东西一样，自动提交也是在轮询里进行的。消费者每次在进行轮询时会检查是够需要提交偏移量了。如果是，那么就会提交从上一次轮询返回的偏移量了。

**自动提交带来的问题**

​	 假设我们使用默认的5s提交间隔，在最新一次提交之后的3s发生了再均衡。再均衡之后，新的消费者从最后一次提交的偏移量位置开始读取消息。这个时候偏移量已经落后了3s，所以在这3s内到达的消息会被**重复消费**。

**解决办法**

  可以通过修改提交时间间隔来更频繁地提交偏移量，减小可能出现重复消费的时间窗，不过这种情况是无法避免的。

在使用自动提交时，每次调用轮询方法都会把上一次调用返回的偏移量提交上去，它并不知道具体哪些消息已经处理了，所以在再次调用之前最好确保所有的当前调用返回的消息都已经处理完毕(在调用close() 方法之前也会进行自动提交)。一般情况下不会有什么问题，不过在处理异常或提前退出轮询时要格外小心。

### 2.同步提交

```java
	private static void syncCommit() {
        Consumer consumer = ConsumerCreator.creatorConsumer();
        consumer.subscribe(Collections.singleton("topic1"));
        while (true) {
            ConsumerRecords<String, String> records = consumer.poll(1000); 
            for (ConsumerRecord<String, String> record : records) {
                recordProcess(record);
                try {
                    consumer.commitSync();
                } catch (CommitFailedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
```

当 **enable.auto.commit** 设为false，让应用程序决定何时提交偏移量。使用 **commitSync()**提交偏移量也最可靠。这个api会提交由poll() 方法返回的最新偏移量，提交成功后马上返回。如果提交失败就抛出异常。

要记住，commitSync() 将会提交由poll() 方法返回的最新偏移量，所以在业务处理完所有消息后，需要确保调用了commitSync()，否则还会有丢失消息的风险。如果发生了再均衡，从最近一批消息到发生再均衡之间的所有的消息将被**重复消息**。

**缺点**

在broker对提交请求作出响应之前，应用程序会一直阻塞，这个会影响到应用程序的吞吐量。**我们可以通过降低提交频率来提升吞吐量，但是如果发生了再均衡，会增加重复消息的数量**。

### 3.异步提交

```java
	private static void asyncCommit() {
        Consumer consumer = ConsumerCreator.creatorConsumer();
        consumer.subscribe(Collections.singleton("topic1"));
        while (true) {
            ConsumerRecords<String, String> records = consumer.poll(1000);
            for (ConsumerRecord<String, String> record : records) {
                recordProcess(record);
            }
            consumer.commitAsync();
        }
    }
```

在调用了 **consumer.commitAsync()** 之后，提交最新的偏移量。

在成功提交或碰到无法恢复的错误之前。commitSync()会一直重试，但是commitAsync()不会。这也是commitAsync()不好的一个地方。它之所以不进行重试，是因为在它收到服务器的响应时候，可能有一个更大的偏移量已经提交成功。假设我们发出一个请求用于提交偏移量2000，这个时候发生了短暂的通信问题，服务器收不到请求，自然不然不会处理请求。与此同时，我们处理了另外一批消息，并成功的提交了偏移量3000。如果commitAsync重新尝试提交偏移量2000。它有可能再在移量3000之后提交成功。这个时候如果发生再均衡，就会出现重复消费情况。

**缺点**

异步提交不能保证提交的稳定性和有序性。



```java
	 /**
     * 3.异步回调提交
     */
    private static void asyncCallBackCommit() {
        Consumer consumer = ConsumerCreator.creatorConsumer();
        consumer.subscribe(Collections.singleton("topic1"));
        while (true) {
            ConsumerRecords<String, String> records = consumer.poll(1000);
            for (ConsumerRecord<String, String> record : records) {
                recordProcess(record);
            }
            consumer.commitAsync(new OffsetCommitCallback() {
                @Override public void onComplete(Map<TopicPartition, OffsetAndMetadata> map,
                                                 Exception e) {
                    ConsumerMain.ASYNC_ID++;
                    int id = ConsumerMain.ASYNC_ID;
                    if (null != e) {
                        //这里通过维护一个自增序列保证重试的安全性，如果条件成立则重试，若不成立。
                        //则说明ConsumerMain.async_id 肯定 大于 id，此时已经有其他有其他轮询提交了偏移量
                        if (id == ConsumerMain.ASYNC_ID) {
                            // 重试
                        }
                    }
                }
            });
        }
    }
```

通过异步提交的回调函数，实现重试。

可以使用一个单调递增的序列号来维护异步提交的顺序。在每次提交偏移量之后或在回调里提交偏移量时递增序列号。在进行重试前，先检查回调的序列号和即将提交的偏移量是否相等。如果相等，说明没有新的提交。那么可以安全地进行重试。如果序列号比较大，说明有一个新的提交已经发送出去了，应该停止重试。

 ### 4.同步和异步组合提交

```java
	private static void syncAndAsyncCommit() {
        Consumer consumer = ConsumerCreator.creatorConsumer();
        consumer.subscribe(Collections.singleton("topic1"));
        try {
            while (true) {
                ConsumerRecords<String, String> records = consumer.poll(1000);
                for (ConsumerRecord<String, String> record : records) {
                    recordProcess(record);
                }
                consumer.commitAsync();
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                consumer.commitSync();
            } finally {
                consumer.close();
            }
        }
    }
```

一般情况下，针对偶尔出现的提交失败，不进行重试不会有太大问题。因为如果提交失败是因为临时(其他问题，比如网络环境，通信故障，不是程序本身问题)问题导致的，那么后续总会提交成功。但如果这是发生在关闭消费者或者再均衡的最后一次提交，就要确保能够提交成功。**具体原理再均衡监听器章节会讲**



### 5.同步和异步组合提交

以上提交模式，提交偏移量的频率与处理消息批次的频率是一样的 (自动提交每次提交的是上一次poll()的偏移量)。但如果想要更频繁地提交该怎么办？如果poll()方法返回一大批数据，为了避免因再均衡引起的重复处理整批消息，想要在批次中间提交偏移量怎么办？这种情况无法通过调用commitSync()或commitAsync()来实现，因为它们只会提交最后一个偏移量，而此时该批次里的消息还没有处理完。

**commitSync() 和 commitAsync() 方法允许传入提交的分区和偏移量的map。**

假设你处理了半个批次的消息，最后一个来自主题"customers"分区3的消息的偏移量是5000，你可以调用commitSync() 方法提交这个偏移量。但是，因为消费者不可能只读取一个分区，你需要跟踪所有分区的便宜偏移量，所以在这个层面控制偏移量的提交会让代码变得复杂。

```java
	private static void offsetCommit() {
        Consumer consumer = ConsumerCreator.creatorConsumer();
        consumer.subscribe(Collections.singleton("topic1"));
        while (true) {
            ConsumerRecords<String, String> records = consumer.poll(100);
            for (ConsumerRecord<String, String> record : records) {
                recordProcess(record);
                TopicPartition topicPartition = new TopicPartition(record.topic(),
                        record.partition());
                OffsetAndMetadata offsetAndMetadata = new OffsetAndMetadata(record.offset() + 1,
                        "no metadata");
                currentOffsets.put(topicPartition, offsetAndMetadata);
                if (count % 1000 == 0){
                    consumer.commitAsync(currentOffsets,null);
                }
                count++;
            }
        }
    }
```

